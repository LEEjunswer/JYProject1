<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.JYProject.project.repository.BoardRepository.BoardMapperRepository">
    <resultMap id="boardResultMap" type="com.JYProject.project.model.Board">
        <id property="boardId" column="board_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="memberId" column="member_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="regDate" column="reg_date"/>
        <result property="updateDate" column="update_date"/>
        <result property="deleteDate" column="delete_date"/>
        <result property="viewCnt" column="view_cnt"/>
        <result property="likes" column="likes"/>
        <result property="dislikes" column="dislikes"/>
        <association property="memberInfo"  javaType="com.JYProject.project.model.Member" resultMap="memberResultInfo" />
    </resultMap>
    <resultMap id="memberResultInfo" type="com.JYProject.project.model.Member">
        <id column="member_id" property="memberId" />
        <result column="nickname" property="nickname" />

    </resultMap>
    <!--보드 추가 -->
    <insert id="insertBoard" parameterType="com.JYProject.project.model.Board" useGeneratedKeys="true" keyProperty="boardId">
        insert into board (category_id,title,content,member_id)
        values(#{categoryId},#{title},#{content},#{memberId});
    </insert>
    <!--보드 1개의값 가져오기 -->
    <select id="selectBoardDetail" parameterType="Long" resultMap="boardResultMap">
        select b.*, m.nickname
        from board b  join member m on b.member_id = m.member_id  where b.board_id=#{boardId};
    </select>
    <!--보드 수정 -->
    <update id="updateBoard" parameterType="com.JYProject.project.model.Board">
        update board
        set title=#{title},
            content=#{content},
            update_date = NOW()
        WHERE board_id = #{boardId}
    </update>
    <!--보드 삭제시킬떄 값 넣어주기 -->
    <update id="deleteBoard" parameterType="Long">
    update board
    set board.delete_date = now()
    where board_id = #{boardId};
    </update>
    <update id="boardViewCntIncrease" parameterType="Long">
    update board
        set view_cnt = view_cnt+1
    where board_id=#{boardId};

    </update>
    <select id="boardAllList" resultMap="boardResultMap">
        select  * from board
    </select>
    <select id="selectBoardTotalCount" resultType="Integer">
        select count(*) board;
    </select>
    <select id="getLikesTotalCount" parameterType="Long" resultType="Integer">
       select count(*),likes from board where board_id=#{boardId}
    </select>

    <select id="getDisLikesTotalCount" parameterType="Long" resultType="Integer">
        select count(*), dislikes from board where board_id=#{boardId}
     </select>
    <!-- 검색 할경우 리스트를 가져온다 -->
    <!--    List<Board> boardSearchAllList(String string);
     List<Board> boardSearchTitleList(String title);
    List<Board> boardSearchWriterList(String writer);
     List<Board> boardSearchContentList(String content);-->


    <select id="boardSearchAllList" parameterType="String" resultMap="boardResultMap">
        SELECT b.*, m.nickname
        FROM board b
                 JOIN member m ON b.member_id = m.member_id
        WHERE b.title LIKE CONCAT('%', #{string}, '%') OR b.content LIKE CONCAT('%', #{string}, '%')
          AND b.delete_date IS NULL
    </select>
    <select id="boardSearchWriterList" parameterType="String" resultMap="boardResultMap">
        SELECT  b.*, m.nickname
                 from board b join member m on b.member_id = m.member_id
        WHERE (m.nickname and delete_date IS NULL LIKE CONCAT('%', #{writer}, '%'))
        and  b.delete_date is null;
    </select>
    <select id="boardSearchContentList" parameterType="String" resultMap="boardResultMap">
        select  b.* , m.nickname
        from board b  join member m on b.member_id = m.member_id
        where b.content  and b.delete_date IS NULL LIKE CONCAT('%', #{content},'%')
        and b.delete_date is null;
</select>
    <select id="boardSearchTitleList" parameterType="String" resultMap="boardResultMap">
        SELECT b.* , m.nickname
        from board b join member m on b.member_id = m.member_id
        WHERE b.title  and b.delete_date IS NULL LIKE CONCAT('%', #{title}, '%')
        and b.delete_date is null;
    </select>
    <select id="getBoardDetail" parameterType="Long" resultMap="boardResultMap">
        select b.* , m.nickname
        from board b join member m on b.member_id = m.member_id
            where b.board_id=#{id} and delete_date IS NULL;
    </select>

    <select id="boardGetCategoryList" parameterType="Integer" resultMap="boardResultMap">
                    select *
                    from board
                   <if test="categoryId != 0">
                   where  category_id=#{categoryId}
                        </if>
            and delete_date IS NULL
                Order By board_id Desc
                    Limit 5;
                </select>
    <select id="getMyBoardList" parameterType="Long" resultMap="boardResultMap">
        select b.* , m.nickname
        from board b   join member m on b.member_id = #{memberId}
        where b.member_id = #{memberId}
          and delete_date IS NULL;

    </select>

    <select id="getMyBoardCount" parameterType="Long" resultType="Integer">
        select count(*) from board where member_id=#{memberId}     and delete_date IS NULL;

    </select>
    <update id="incrementLikes">
        UPDATE board SET likes = likes + 1 WHERE board_id = #{boardId}
    </update>

    <update id="incrementDislikes">
        UPDATE board SET dislikes = dislikes + 1 WHERE board_id = #{boardId}
    </update>

    <!-- hone에서만 표현하기 떄문에 닉네임이 필요한지몰것다 LikeCount 만들엉하나;-->
    <select id="getWeekBestBoardList" parameterType="map" resultMap="boardResultMap">
        SELECT *, (`likes` - disLikes) AS LikeCount
        FROM board
        <where>
            <if test="categoryId != 0">
                category_id=#{categoryId}
                AND reg_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
                and delete_date IS NULL
        </if>
            <if test="categoryId == 0">
                    reg_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
                and delete_date IS NULL
                    </if>
        </where>
        ORDER BY LikeCount DESC
        LIMIT #{offset}, #{pageSize};
    </select>
    <select id="getDailyBestBoardList" parameterType="map" resultMap="boardResultMap">
        SELECT *, (`likes` - disLikes) AS LikeCount
        FROM board
        <where>
            DATE_FORMAT(reg_date, "%Y-%m-%d") = CURDATE()
            <if test="categoryId != 0">
                AND category_id = #{categoryId}
                and delete_date IS NULL
            </if>
        </where>
        ORDER BY LikeCount DESC
        LIMIT #{offset}, #{pageSize};
    </select>

<!-- 회원탈퇴시 모든 글들을 보관하기 위해 delete_date를 집어넣는다-->
    <update id="boardDeleteFindMemberId" parameterType="Long">
        update  board
        set delete_date= now()
               where member_id=#{memberId}  and delete_date is null;
    </update>
</mapper>